<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  <subtitle>独立开发，自由职业</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://atjason.com/"/>
  <updated>2019-04-11T23:57:29.393Z</updated>
  <id>https://atjason.com/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0412 - 好产品，就在那里</title>
    <link href="https://atjason.com/daily/2019-04-12.html"/>
    <id>https://atjason.com/daily/2019-04-12.html</id>
    <published>2019-04-12T14:00:00.000Z</published>
    <updated>2019-04-11T23:57:29.393Z</updated>
    
    <content type="html"><![CDATA[<p>好的产品，就像本就在那里，只是被发现、而不是被创造，且无法被更好的人造物取代。</p>
<p>就像好的雕塑，不是被刻出来，而是本来就藏在石料里，只是被褪去石头外衣、露出本来面目而已。而，你又无法用石头粉捏出个雕塑，不是那个感觉。</p>
<p>我们不是在创造产品，而是沿着用户需求和体验这条纹理，慢慢褪去石头外衣，找到本就藏在里面的产品。</p>
<p>至少，要有对好产品保持敬畏的心态，而不是以造物主自居。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好的产品，就像本就在那里，只是被发现、而不是被创造，且无法被更好的人造物取代。&lt;/p&gt;
&lt;p&gt;就像好的雕塑，不是被刻出来，而是本来就藏在石料里，只是被褪去石头外衣、露出本来面目而已。而，你又无法用石头粉捏出个雕塑，不是那个感觉。&lt;/p&gt;
&lt;p&gt;我们不是在创造产品，而是沿着用
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0411 - 能力与意识</title>
    <link href="https://atjason.com/daily/2019-04-11.html"/>
    <id>https://atjason.com/daily/2019-04-11.html</id>
    <published>2019-04-11T14:00:00.000Z</published>
    <updated>2019-04-11T16:55:22.563Z</updated>
    
    <content type="html"><![CDATA[<p>有没有这种感觉：<br>有的人你想让他做点事，他很快就能理解你到底想要什么、做成什么样子，可做事情的速度可能不如意；<br>有的人刚好反过来，做事情挺快，但总感觉做的不是你想要的样子。</p>
<p>要是这两种东西同时放在自己身上，就有点难受了：<br>有时，明明已经想清楚了事情，可就是做的很慢，迟迟拿不到结果；<br>有时，状态很好、做事很快，但不知道最应该做什么、做到什么程度为止。</p>
<p>以自己目前独立开发、尚没有稳定团队的情况，还是得能力与意识兼备，不能有明显的短板。不过，感觉自己做事的速度太慢，远远跟不上想的速度。得考虑搭班子、建团队了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有没有这种感觉：&lt;br&gt;有的人你想让他做点事，他很快就能理解你到底想要什么、做成什么样子，可做事情的速度可能不如意；&lt;br&gt;有的人刚好反过来，做事情挺快，但总感觉做的不是你想要的样子。&lt;/p&gt;
&lt;p&gt;要是这两种东西同时放在自己身上，就有点难受了：&lt;br&gt;有时，明明已经想清楚
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0410 - 不能半途而废</title>
    <link href="https://atjason.com/daily/2019-04-10.html"/>
    <id>https://atjason.com/daily/2019-04-10.html</id>
    <published>2019-04-10T14:00:00.000Z</published>
    <updated>2019-04-10T15:49:30.044Z</updated>
    
    <content type="html"><![CDATA[<p>事情做一半就转向，之前做的就全浪费了。</p>
<p>之所以转向，很可能是遇到了更值得做的事。可事实上，就像谈恋爱一样，开始时看到的都是好的一面，时间长了才会慢慢发现不好的一面。到底好的事是否真的值得做，其实也得慎重。</p>
<p>即使是转向，也要把目前的事收尾、告一段落，而不能嘎嘣脆地放下不管。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;事情做一半就转向，之前做的就全浪费了。&lt;/p&gt;
&lt;p&gt;之所以转向，很可能是遇到了更值得做的事。可事实上，就像谈恋爱一样，开始时看到的都是好的一面，时间长了才会慢慢发现不好的一面。到底好的事是否真的值得做，其实也得慎重。&lt;/p&gt;
&lt;p&gt;即使是转向，也要把目前的事收尾、告一段落
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0409 - 项目开始时的不确定性阶段</title>
    <link href="https://atjason.com/daily/2019-04-09.html"/>
    <id>https://atjason.com/daily/2019-04-09.html</id>
    <published>2019-04-09T14:00:00.000Z</published>
    <updated>2019-04-09T14:26:35.259Z</updated>
    
    <content type="html"><![CDATA[<p>项目初期，什么都不确定，什么都要做，却又被各种东西卡着，不知从何做起，这种感觉真难受。怎么办呢？有几点感受。</p>
<p>状态要好<br>这是最重要的。在大量不确定性前提下，不管是什么思考还是行动，都是很费脑很累的。一旦状态不好，很容易感到疲惫，想放弃。</p>
<p>真奔核心业务<br>不绕弯子，不在外围的事情上浪费太多精力，直接把注意力集中在产品最核心的业务部分。业务实现了，才是产品；否则，只是各种已有轮子的堆叠。</p>
<p>擅长单元测试<br>这是为了保证一步一个脚印。前期变动大，很容易出现做好了 A，在做 B 时又把 A 破坏的情况。有了单元测试、持续集成，可以早点发现、早修复。</p>
<p>擅用 Mock<br>尤其是前后端配合时，脑子在前后端切换，是很费脑子的。在做前端时，擅用 Mock 提供带数据的接口，既不防碍前端进展，又能在做真实业务时，思考和调整后端应提供的接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目初期，什么都不确定，什么都要做，却又被各种东西卡着，不知从何做起，这种感觉真难受。怎么办呢？有几点感受。&lt;/p&gt;
&lt;p&gt;状态要好&lt;br&gt;这是最重要的。在大量不确定性前提下，不管是什么思考还是行动，都是很费脑很累的。一旦状态不好，很容易感到疲惫，想放弃。&lt;/p&gt;
&lt;p&gt;真
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0408 - 从开源项目中学习</title>
    <link href="https://atjason.com/daily/2019-04-08.html"/>
    <id>https://atjason.com/daily/2019-04-08.html</id>
    <published>2019-04-08T14:00:00.000Z</published>
    <updated>2019-04-08T15:52:58.097Z</updated>
    
    <content type="html"><![CDATA[<p>我之前的学习方式，大部分是直接学习技术，然后直接使用该技术，从零开始堆代码，解决实际问题。</p>
<p>这种方式的好处时，对技术基础部分理解比较深入；学习是一步步深入的，难度相对小些，不会因为太难而出戏或放弃。</p>
<p>坏处是，缺乏大型项目的最佳实践经验。对一些技术的组合及使用，全凭自己对新技术的理解和过往的经验。而这样的使用，很可能是「土方法」。虽说在小项目中也能实现功能，但往往不优雅、灵活性差。</p>
<p>与之相比，另一种学习及使用新技术的方法是：<strong>基于开源库学习</strong>。这些开源库，是对技术的完整及实际使用；并不是 Hello World 级别，而是真实可用于生产的使用。</p>
<p>比如，在学习 Ant Design 时，前一种使用是自己看完文档及各组件用法后，自己堆代码以实现业务逻辑。后一种是，继续学习 Ant Design Pro，然后在其基础上修改，或借鉴其整体代码并实现业务。Ant Design Pro 并不是对 Ant Design 简单的示例性应用，而是开箱即用、可用于生产环境的项目。</p>
<p>这样的学习方式，好坏几乎是与第一种方式反过来的。好处是，可以学到更专业的用法；坏处是，由于一下子要接触大量新的、和自己风格不同的代码，学习起来比较吃力；在没有大块时间或充分的心理准备时，很可能会进行不下去；这也是上周我拖延的原因。</p>
<p>不过，我今天硬着头皮看代码，确实是有些收获。需要指出的一点是，和在开源项目基础上修改的做法相比，个人三汤五割更好的是新起一个项目，把开源项目中好的、自己用得到的部分搬过来，并适配自己的代码风格和惯用法。通过这么一搬和适配，才能更好地理解、更有可能成为自己真正的积累。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我之前的学习方式，大部分是直接学习技术，然后直接使用该技术，从零开始堆代码，解决实际问题。&lt;/p&gt;
&lt;p&gt;这种方式的好处时，对技术基础部分理解比较深入；学习是一步步深入的，难度相对小些，不会因为太难而出戏或放弃。&lt;/p&gt;
&lt;p&gt;坏处是，缺乏大型项目的最佳实践经验。对一些技术
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0407 - 意外无可避免</title>
    <link href="https://atjason.com/daily/2019-04-07.html"/>
    <id>https://atjason.com/daily/2019-04-07.html</id>
    <published>2019-04-07T14:00:00.000Z</published>
    <updated>2019-04-07T13:58:27.898Z</updated>
    
    <content type="html"><![CDATA[<p>今天娃把眼角磕破了，怕留疤，整形医院缝了「美容针」，￥2492，外加抱着哄玩了一天。</p>
<p>事后来看，这样的意外均可避免，一定会发生，只是早晚的问题。<strong>与其想方设法防范避免，不如提高出问题后的应对能力</strong>，比如：</p>
<ul>
<li>时间自由，可以花大把陪娃去医院，而不担心被 996 公司边缘化</li>
<li>有钱，能给娃提供好的医疗条件</li>
<li>风险控制，比如购买医疗保险、意外险，降低意外发生时的损失</li>
</ul>
<p>也看到了环境的重要性。比如，小城市医疗条件、医生素质，确实不如大城市。一旦发生急性病，根本来不及找更好的就医环境，只能就近就医。这时，环境的整体水平，就是大部分人唯一可依赖的东西。</p>
<p>也发现，很多事情并不是钱能解决的。比如，去医院看病，即使是急诊，如果前面的人也是急诊、甚至是更急，这时，钱是无用的，人会有很强的无力感。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天娃把眼角磕破了，怕留疤，整形医院缝了「美容针」，￥2492，外加抱着哄玩了一天。&lt;/p&gt;
&lt;p&gt;事后来看，这样的意外均可避免，一定会发生，只是早晚的问题。&lt;strong&gt;与其想方设法防范避免，不如提高出问题后的应对能力&lt;/strong&gt;，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0406 - 时间的尺度</title>
    <link href="https://atjason.com/daily/2019-04-06.html"/>
    <id>https://atjason.com/daily/2019-04-06.html</id>
    <published>2019-04-06T14:00:00.000Z</published>
    <updated>2019-04-06T16:34:12.468Z</updated>
    
    <content type="html"><![CDATA[<p>尤努斯，这位被誉为“小额信贷之父”、创办了被称为“穷人银行”的银行，并因此获得 2006 年诺贝尔和平奖。</p>
<p>而十几年过去了，这一模式暴露的问题越来越多，批评的声音自然也变得强烈。</p>
<ul>
<li>比如，贷款利率高达 20% ~ 50%，非但不能减少贫困，还成为穷人的陷阱（点名花呗之类的产品）；</li>
<li>比如，贷款的用途并不是做生意（即使是做生意，什么生意能有 50% 的收益），而是用于生活救急，比如看病；考虑到利率，颇有点饮鸩止渴的感觉；</li>
<li>比如，该银行在中国的复制，商业上失败了：收益远低于运营开销；</li>
</ul>
<p>这里并不是想讨论这一模式的功过得失，而是即使有诺贝尔奖加持的东西，一旦放在时间的长河中，就不一定能经历得起时间的考验。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尤努斯，这位被誉为“小额信贷之父”、创办了被称为“穷人银行”的银行，并因此获得 2006 年诺贝尔和平奖。&lt;/p&gt;
&lt;p&gt;而十几年过去了，这一模式暴露的问题越来越多，批评的声音自然也变得强烈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如，贷款利率高达 20% ~ 50%，非但不能减少贫
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0405 - 经济移民</title>
    <link href="https://atjason.com/daily/2019-04-05.html"/>
    <id>https://atjason.com/daily/2019-04-05.html</id>
    <published>2019-04-05T14:00:00.000Z</published>
    <updated>2019-04-05T15:37:28.199Z</updated>
    
    <content type="html"><![CDATA[<p>因为求学、工作，背井离乡。</p>
<p>先是侯鸟，假期、过年时回家。</p>
<p>后来，家里老人来照顾小孩，过年都不一定回家了。</p>
<p>再后来呢？</p>
<p>若是老人不在、房子拆迁，怕是永远也回不去了。</p>
<p>是什么力量在驱动这一切，又让人心甘情愿？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为求学、工作，背井离乡。&lt;/p&gt;
&lt;p&gt;先是侯鸟，假期、过年时回家。&lt;/p&gt;
&lt;p&gt;后来，家里老人来照顾小孩，过年都不一定回家了。&lt;/p&gt;
&lt;p&gt;再后来呢？&lt;/p&gt;
&lt;p&gt;若是老人不在、房子拆迁，怕是永远也回不去了。&lt;/p&gt;
&lt;p&gt;是什么力量在驱动这一切，又让人心甘情愿？
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0404 - 收敛技术栈</title>
    <link href="https://atjason.com/daily/2019-04-04.html"/>
    <id>https://atjason.com/daily/2019-04-04.html</id>
    <published>2019-04-04T14:00:00.000Z</published>
    <updated>2019-04-04T15:14:14.963Z</updated>
    
    <content type="html"><![CDATA[<p>即便号称「全干工程师」，也不可能全都能干；<br>即使全都能干，也不可能全部都精通。</p>
<p>尤其具体到个人，时间精力有限，体力心智最优的时间段也有限，能掌握的东西也有限。在有限这个大提前下，做事情就不能无节制，就要有所取舍。</p>
<p>具体的，比如 A 和 B 两种技术都能解决某问题，那最好只掌握其中一种。把过多的时间花在两种都掌握上，不如去掌握解决另外问题的技术。</p>
<p>怎么才叫掌握呢？一个直白的标准：不用 Google，也能快速可靠地解决具体的问题。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;即便号称「全干工程师」，也不可能全都能干；&lt;br&gt;即使全都能干，也不可能全部都精通。&lt;/p&gt;
&lt;p&gt;尤其具体到个人，时间精力有限，体力心智最优的时间段也有限，能掌握的东西也有限。在有限这个大提前下，做事情就不能无节制，就要有所取舍。&lt;/p&gt;
&lt;p&gt;具体的，比如 A 和 B 
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0403 - 少留技术债务</title>
    <link href="https://atjason.com/daily/2019-04-03.html"/>
    <id>https://atjason.com/daily/2019-04-03.html</id>
    <published>2019-04-03T14:00:00.000Z</published>
    <updated>2019-04-03T15:39:18.924Z</updated>
    
    <content type="html"><![CDATA[<p>今天迁移服务器，花了比较多时间在一个处于维护状态中的一个功能&amp;服务。现在看来，这就是一种技术债务了。</p>
<p>怎么来的呢？最开始时，这个后端功能是用 Swift 实现的；你没看错，几年前用 Swift 实现后端功能；估计放现在，也没几个人这么干。后来，学 Python，就用 Python 又实现了一遍。再后来，技术栈收敛到 js/node，Python 就又搁着了。于是，迁移时就成了技术债务。</p>
<p>还有个原因，其中使用了 MySQL 数据库。而现在，我又将重心放在了 MongoDB 上，MySQL 就又成包袱了…且，毕竟 MySQL 安装维护啥的，也是成本。最后，我把数据库又转为 SQLite 了。其实，如果当初直接就选择 SQLite，现在也就没太多成本了。</p>
<p>说到这个，就又说起另外一个话题：<strong>对于实际生产，可维护性、低维护成本的技术方案，可能比性能等其他方面更重要</strong>。</p>
<p>要减少技术债务，比较重要的一点，还是 <strong>收敛技术栈</strong>。凡是自己接触的技术，都掌握到熟练的程度。如果是学学的技术，谨慎使用到需要长期维护的项目中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天迁移服务器，花了比较多时间在一个处于维护状态中的一个功能&amp;amp;服务。现在看来，这就是一种技术债务了。&lt;/p&gt;
&lt;p&gt;怎么来的呢？最开始时，这个后端功能是用 Swift 实现的；你没看错，几年前用 Swift 实现后端功能；估计放现在，也没几个人这么干。后来，学 Py
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0402 - 不确定性的魅力</title>
    <link href="https://atjason.com/daily/2019-04-02.html"/>
    <id>https://atjason.com/daily/2019-04-02.html</id>
    <published>2019-04-02T14:00:00.000Z</published>
    <updated>2019-04-02T14:31:24.343Z</updated>
    
    <content type="html"><![CDATA[<p>我们做的很多事，都可以算作在追求确定性。比如，怎么做才能 XXX</p>
<p>而另一方面，不是所有事都有确定性，也不只是确定性才有意义。</p>
<p>比如，出去旅游，如果攻略做的太详细，未免乏味。且如果因为变动而无法照着攻略行动，人会变得焦虑。</p>
<p>比如，看一本不知道结尾的小说，更引人入胜。</p>
<p>比如，一眼望穿的人生，没有吸引力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们做的很多事，都可以算作在追求确定性。比如，怎么做才能 XXX&lt;/p&gt;
&lt;p&gt;而另一方面，不是所有事都有确定性，也不只是确定性才有意义。&lt;/p&gt;
&lt;p&gt;比如，出去旅游，如果攻略做的太详细，未免乏味。且如果因为变动而无法照着攻略行动，人会变得焦虑。&lt;/p&gt;
&lt;p&gt;比如，看一
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0401 - 文档的命运，就是没人看</title>
    <link href="https://atjason.com/daily/2019-04-01.html"/>
    <id>https://atjason.com/daily/2019-04-01.html</id>
    <published>2019-04-01T14:00:00.000Z</published>
    <updated>2019-04-01T15:35:40.041Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>从用户的角度，应该有看文档的自觉。</li>
<li>从设计者的角度，用户应该开箱即用，无需看文档或少看文档。</li>
</ol>
<p>文档，就像公共场所的消防栓，最好的命运是没人用；退一步，在真要用时，凭直觉和常识就能使用。最差的，才是得严格按照操作说明才能正常使用。</p>
<blockquote>
<p>路透社方面获悉，2018年10月29日坠海的印度尼西亚狮航JT610航班黑匣子录音内容首次公开：在飞机坠毁前，机组人员还在翻操作手册，但最终没有找到解决方案。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;从用户的角度，应该有看文档的自觉。&lt;/li&gt;
&lt;li&gt;从设计者的角度，用户应该开箱即用，无需看文档或少看文档。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;文档，就像公共场所的消防栓，最好的命运是没人用；退一步，在真要用时，凭直觉和常识就能使用。最差的，才是得严格按照操作说明才
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0331 - 有钱之后做什么</title>
    <link href="https://atjason.com/daily/2019-03-31.html"/>
    <id>https://atjason.com/daily/2019-03-31.html</id>
    <published>2019-03-31T14:00:00.000Z</published>
    <updated>2019-03-30T23:46:47.587Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个似简实难的问题，不亚于我最想做什么、价值观及存在的意义等这样的神问，只是更具体些。</p>
<p>试着回答这个问题：如果我口袋里「多出」了这么多钱、甚至必需要花掉，我会用来做什么？</p>
<ul>
<li>10 万</li>
<li>100 万</li>
<li>1000 万</li>
<li>1 亿</li>
<li>10 亿</li>
<li>…</li>
</ul>
<p>且不说答案的好坏，当到某个数字，你的回答变得困难、变慢时，这基本上就是你能驾驭的钱了。</p>
<p>说起答案，我想很多人的答案包含这个：<strong>有钱了，自然什么都不干，去周游世界啊</strong>。只是有这么个问题：你周游世界后，除了对当时旅游经济有点贡献，<strong>这个世界有什么改变？如果有我没我一个样，活着也未免无趣了些。</strong></p>
<p>同样是游历，就说人家徐霞客，一生志在四方，历经 30 余年，足迹遍及今 21 个省市自治区，记录观察到的各种现象、人文、地理、动植物等状况，撰成的60万字地理名著《徐霞客游记》</p>
<p>巴菲特说过，<strong>钱是为了让你做想做的事，而不是为了让你无所事事</strong>。</p>
<p>至少，能回答好有钱之后做什么，才更有动力赚钱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个似简实难的问题，不亚于我最想做什么、价值观及存在的意义等这样的神问，只是更具体些。&lt;/p&gt;
&lt;p&gt;试着回答这个问题：如果我口袋里「多出」了这么多钱、甚至必需要花掉，我会用来做什么？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10 万&lt;/li&gt;
&lt;li&gt;100 万&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0330 - 纸质书的意外进度</title>
    <link href="https://atjason.com/daily/2019-03-30.html"/>
    <id>https://atjason.com/daily/2019-03-30.html</id>
    <published>2019-03-30T14:00:00.000Z</published>
    <updated>2019-03-30T15:32:20.945Z</updated>
    
    <content type="html"><![CDATA[<p>好久没看纸质书，最近买了几本看；意外发现，看纸质书的进度，明显比电子书快。</p>
<p>看纸质书时，是绝对专注的；甚至比 Kindle 还要好一点点，不会被意外的消息打扰。一旦沉浸其中，自然读得就快些。而且，更有继续读下去的冲动。</p>
<p>另外，纸质书的翻页效果、整本书当前读了多少，这种感觉是电子设备无法比拟的，仪式感更强。</p>
<p>当然，这些便利也只是便利。要不要读书，还是得看自己，和便利的关系不大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没看纸质书，最近买了几本看；意外发现，看纸质书的进度，明显比电子书快。&lt;/p&gt;
&lt;p&gt;看纸质书时，是绝对专注的；甚至比 Kindle 还要好一点点，不会被意外的消息打扰。一旦沉浸其中，自然读得就快些。而且，更有继续读下去的冲动。&lt;/p&gt;
&lt;p&gt;另外，纸质书的翻页效果、整
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0329 - 境界要高、格局要大</title>
    <link href="https://atjason.com/daily/2019-03-29.html"/>
    <id>https://atjason.com/daily/2019-03-29.html</id>
    <published>2019-03-29T14:00:00.000Z</published>
    <updated>2019-03-31T15:46:46.396Z</updated>
    
    <content type="html"><![CDATA[<p>这并不是很空洞的东西，是很具体的。</p>
<p>比如，在支付得起正版的前提下，还要费尽心思和时间去钻免费的空子，甚至是盗版，这就是反面例子。且不说这样的做法是否上得了台面，这样的人，难成大事。</p>
<p>对我而言，尽量不去做别人做过的事，要做也做的比别人好；最好是出新，同时也确实能解决用户的问题。目的是成事，不在具体的细节过多纠缠。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这并不是很空洞的东西，是很具体的。&lt;/p&gt;
&lt;p&gt;比如，在支付得起正版的前提下，还要费尽心思和时间去钻免费的空子，甚至是盗版，这就是反面例子。且不说这样的做法是否上得了台面，这样的人，难成大事。&lt;/p&gt;
&lt;p&gt;对我而言，尽量不去做别人做过的事，要做也做的比别人好；最好是出新
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0328 - AWS 的大腿就是粗</title>
    <link href="https://atjason.com/daily/2019-03-28.html"/>
    <id>https://atjason.com/daily/2019-03-28.html</id>
    <published>2019-03-28T14:00:00.000Z</published>
    <updated>2019-03-28T15:19:54.450Z</updated>
    
    <content type="html"><![CDATA[<p>比如，Amazon 邮件服务 (Amazon SES)，在绑定域名后，可以发给任意该域名下邮箱的邮件，比如 xxx@domain.com，这就意味着有无数邮箱了。</p>
<p>更好玩的事，在 SES 收到邮件时，可以触发不同的事件，比如转发到指定邮件。更更好玩的是，可以触发 Lambda 云函数，做指定的事情，比如解析邮件内容，然后根据内容来响应。</p>
<p>无数邮箱 + 解析邮件内容，这二者结合，想象空间太大了。</p>
<p>AWS 的大腿就是粗，以后得多抱抱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比如，Amazon 邮件服务 (Amazon SES)，在绑定域名后，可以发给任意该域名下邮箱的邮件，比如 xxx@domain.com，这就意味着有无数邮箱了。&lt;/p&gt;
&lt;p&gt;更好玩的事，在 SES 收到邮件时，可以触发不同的事件，比如转发到指定邮件。更更好玩的是，可以触
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0327 - 时间很快与该不该</title>
    <link href="https://atjason.com/daily/2019-03-27.html"/>
    <id>https://atjason.com/daily/2019-03-27.html</id>
    <published>2019-03-27T14:00:00.000Z</published>
    <updated>2019-03-28T01:13:58.928Z</updated>
    
    <content type="html"><![CDATA[<p>跟我妈聊，她总是说：这一周一周过的真快啊，这就又到周末了。</p>
<p>是啊，时间很快；又比任何人都勤奋，永远在往前走。</p>
<p>与之形成反差的，是现在正在做的事，回报周期那么长、有多少又不确定，还要不要继续做呢？本来就没多少时间了，还要在目前的事情上继续投入吗？时间越快、回报越慢、现实压力越大，这种痛苦与纠结就愈发强烈。</p>
<p>只是，时间的紧张感确实明显加深我们的焦虑，却不应该是影响决策的因素。如果时间的紧张感明显影响到的你的决策，暂时忘记时间这个因素，然后再做决策。</p>
<p><strong>压力，并不是真正的动力；动力在心。</strong></p>
<p>真正做事的时侯，最好能忘记时间的存在，全情投入。事情做的好不好，更多在于自己的努力；深度优秀的人或事，甚至能穿越时间，成为经典。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟我妈聊，她总是说：这一周一周过的真快啊，这就又到周末了。&lt;/p&gt;
&lt;p&gt;是啊，时间很快；又比任何人都勤奋，永远在往前走。&lt;/p&gt;
&lt;p&gt;与之形成反差的，是现在正在做的事，回报周期那么长、有多少又不确定，还要不要继续做呢？本来就没多少时间了，还要在目前的事情上继续投入吗？时
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0326 - 苹果的「圈留割」</title>
    <link href="https://atjason.com/daily/2019-03-26.html"/>
    <id>https://atjason.com/daily/2019-03-26.html</id>
    <published>2019-03-26T14:00:00.000Z</published>
    <updated>2019-03-26T01:33:10.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>圈留割：把用户圈进来，想办法把用户留住，然后从用户身上获利。</strong></p>
<p>当然，这是一套比较刻薄的说法，更多是站点商家和商业的角度来看，暂时忽略了给用户提供了更高价值的事实。比如，给用户带来了十分的好处，从中获取一分的利润。这样的利润，再多也不过分。</p>
<p>好了，我们试着把这个逻辑套在苹果身上。没错，就是那个散发光辉的苹果。</p>
<p><strong>先说硬件</strong>。苹果应该是硬件起家、即使现在也是硬件利润最大、却极力撇清给外界这个印象。为什么？因为硬件设计制造周期长、风险大、增长有明显的天花板。硬件增加收入也就两种方式：<strong>提价和销量</strong>。提价就不说了，最近苹果被迫降价销售，说明此路不通。销量方面，总不能人手一部吧？好，就算今年人手一部，明年呢？卖给外星人？单纯的硬件，无法撑起苹果股份不断上涨的期望。</p>
<p><strong>再说 iOS 及 App 生态</strong>。很多人想换 Android 手机却没换，很大的原因就是对 iOS App 的依赖；这是我感觉苹果最有价值的部分。可，这部分也有问题。比如，大家安装新 App 的次数越来越少了，Top 1000 甚至 Top 100 的 App，占据了绝大多数用户的绝大多数时间。还有个问题，就是微信小程序为代表的各种轻应用，事实上扼杀了很多长尾 App，给 App 生态带来直接的威胁。不爽的是，App 带来的收入，开发者竟然拿走大部分、自己只能得到 30%；更可恶的是，微信小程序竟然想绕过自己搞支付，直接攫取这可能的 30% 收入。是可忍，股价不能忍。</p>
<p><strong>再说怎么割</strong>，也就是增加收入。前面说了，硬件是主要的收入来源，却有明显的问题。那怎么办呢？苹果的选择明显是服务。服务主要是指订阅，比如 iCloud、Apple Music、Apple TV 等。既不用给别人分成 30%，又是持续、稳定、可增长的，还能给用户带来价值，怎能不诱人？比如今天的苹果发布会，有媒体标题为：<strong>苹果发布会一款硬件没发：All in服务摆脱「硬件依赖」</strong></p>
<p>最后，看下 <a href="https://www.apple.com/cn/newsroom/2019/01/apple-reports-first-quarter-results/" target="_blank" rel="external">Apple 第一季度业绩</a></p>
<blockquote>
<p>iPhone® 的收入相比去年下降 15%，而其他所有产品和服务的收入则增长了 19%。服务收入…达创纪录的 109 亿美元。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;圈留割：把用户圈进来，想办法把用户留住，然后从用户身上获利。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这是一套比较刻薄的说法，更多是站点商家和商业的角度来看，暂时忽略了给用户提供了更高价值的事实。比如，给用户带来了十分的好处，从中获取一分的利润。这样的利润，再
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0325 - 收敛与简化</title>
    <link href="https://atjason.com/daily/2019-03-25.html"/>
    <id>https://atjason.com/daily/2019-03-25.html</id>
    <published>2019-03-25T14:00:00.000Z</published>
    <updated>2019-03-25T15:45:21.362Z</updated>
    
    <content type="html"><![CDATA[<p>今天花了点时间研究下 Google 关键词排名监控的产品，感觉有好多。如果把他们的功能点取并集，感觉有好多。</p>
<p>而事实上，用户肯定不需要所有功能，我也没时间做那么多。这就需要取舍、简化，只做最必要的功能、用最简洁的形式。开放容易收敛难，这是产品初期不确定性最大、最烧脑的阶段。</p>
<p>而这个问题如果不想清楚，就直接上代码、边实现边改，就会出现做百度时的问题：因为对需求的理解有变动，数据结构和接口变动，这些变动湮没了很多时间。</p>
<p>明天再深度体验几款产品，找出最小功能集（没办法，我不是这个产品的直接用户，只能这样找灵感了…）。同时，初期的数据结构，尽量做的能支撑大部分功能，保留扩展性。争取明晚能正式开始代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天花了点时间研究下 Google 关键词排名监控的产品，感觉有好多。如果把他们的功能点取并集，感觉有好多。&lt;/p&gt;
&lt;p&gt;而事实上，用户肯定不需要所有功能，我也没时间做那么多。这就需要取舍、简化，只做最必要的功能、用最简洁的形式。开放容易收敛难，这是产品初期不确定性最大、
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0324 - 「我竟然忘了这件事」</title>
    <link href="https://atjason.com/daily/2019-03-24.html"/>
    <id>https://atjason.com/daily/2019-03-24.html</id>
    <published>2019-03-24T14:00:00.000Z</published>
    <updated>2019-03-24T14:41:04.955Z</updated>
    
    <content type="html"><![CDATA[<p>是不是时不时就会有这样的情况：一拍大腿，我竟然忘了这件事；要是当初做了某事就好了，现在弥补成本太高了；等等。</p>
<p>我并不是想说用待办事项软件记录下来，也不是想说注意重要而不紧急的事，而是想说，<strong>别让自己 100% 被具体的事务缠住了，至少要让 20% 的自己跳出来，站在更高的角度去审视自己、审视身边人、审视生活</strong>。可以是天马行空，可以是无厘头。即便从效用的角度，如果这时候在某个关键节点投入一点点精力，也好过将来用极大的成本来弥补或补齐。</p>
<p>给生活多一些照顾，生活少给你一些意外。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是不是时不时就会有这样的情况：一拍大腿，我竟然忘了这件事；要是当初做了某事就好了，现在弥补成本太高了；等等。&lt;/p&gt;
&lt;p&gt;我并不是想说用待办事项软件记录下来，也不是想说注意重要而不紧急的事，而是想说，&lt;strong&gt;别让自己 100% 被具体的事务缠住了，至少要让 20%
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
</feed>
