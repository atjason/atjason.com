<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason</title>
  <subtitle>独立开发，自由职业</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://atjason.com/"/>
  <updated>2019-03-29T15:02:35.510Z</updated>
  <id>https://atjason.com/</id>
  
  <author>
    <name>Jason</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0329 - 境界要高、格局要大</title>
    <link href="https://atjason.com/daily/2019-03-29.html"/>
    <id>https://atjason.com/daily/2019-03-29.html</id>
    <published>2019-03-29T14:00:00.000Z</published>
    <updated>2019-03-29T15:02:35.510Z</updated>
    
    <content type="html"><![CDATA[<p>这并不是很空洞的东西，是很具体的。</p>
<p>比如，在支付得起正版的前提下，还要费尽心思和时间去钻免费的空子，甚至是盗版，这就是反面例子。且不说这样的做法是否上得了台面，这样的人，难成大事。</p>
<p>对我而言，尽量不去做别人做过的事，要做也做的比别人好；最好是出新，同时也确实能解决用户的问题。目的是成事，不在具体的细节过多纠缠，</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这并不是很空洞的东西，是很具体的。&lt;/p&gt;
&lt;p&gt;比如，在支付得起正版的前提下，还要费尽心思和时间去钻免费的空子，甚至是盗版，这就是反面例子。且不说这样的做法是否上得了台面，这样的人，难成大事。&lt;/p&gt;
&lt;p&gt;对我而言，尽量不去做别人做过的事，要做也做的比别人好；最好是出新
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0328 - AWS 的大腿就是粗</title>
    <link href="https://atjason.com/daily/2019-03-28.html"/>
    <id>https://atjason.com/daily/2019-03-28.html</id>
    <published>2019-03-28T14:00:00.000Z</published>
    <updated>2019-03-28T15:19:54.450Z</updated>
    
    <content type="html"><![CDATA[<p>比如，Amazon 邮件服务 (Amazon SES)，在绑定域名后，可以发给任意该域名下邮箱的邮件，比如 xxx@domain.com，这就意味着有无数邮箱了。</p>
<p>更好玩的事，在 SES 收到邮件时，可以触发不同的事件，比如转发到指定邮件。更更好玩的是，可以触发 Lambda 云函数，做指定的事情，比如解析邮件内容，然后根据内容来响应。</p>
<p>无数邮箱 + 解析邮件内容，这二者结合，想象空间太大了。</p>
<p>AWS 的大腿就是粗，以后得多抱抱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比如，Amazon 邮件服务 (Amazon SES)，在绑定域名后，可以发给任意该域名下邮箱的邮件，比如 xxx@domain.com，这就意味着有无数邮箱了。&lt;/p&gt;
&lt;p&gt;更好玩的事，在 SES 收到邮件时，可以触发不同的事件，比如转发到指定邮件。更更好玩的是，可以触
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0327 - 时间很快与该不该</title>
    <link href="https://atjason.com/daily/2019-03-27.html"/>
    <id>https://atjason.com/daily/2019-03-27.html</id>
    <published>2019-03-27T14:00:00.000Z</published>
    <updated>2019-03-28T01:13:58.928Z</updated>
    
    <content type="html"><![CDATA[<p>跟我妈聊，她总是说：这一周一周过的真快啊，这就又到周末了。</p>
<p>是啊，时间很快；又比任何人都勤奋，永远在往前走。</p>
<p>与之形成反差的，是现在正在做的事，回报周期那么长、有多少又不确定，还要不要继续做呢？本来就没多少时间了，还要在目前的事情上继续投入吗？时间越快、回报越慢、现实压力越大，这种痛苦与纠结就愈发强烈。</p>
<p>只是，时间的紧张感确实明显加深我们的焦虑，却不应该是影响决策的因素。如果时间的紧张感明显影响到的你的决策，暂时忘记时间这个因素，然后再做决策。</p>
<p><strong>压力，并不是真正的动力；动力在心。</strong></p>
<p>真正做事的时侯，最好能忘记时间的存在，全情投入。事情做的好不好，更多在于自己的努力；深度优秀的人或事，甚至能穿越时间，成为经典。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;跟我妈聊，她总是说：这一周一周过的真快啊，这就又到周末了。&lt;/p&gt;
&lt;p&gt;是啊，时间很快；又比任何人都勤奋，永远在往前走。&lt;/p&gt;
&lt;p&gt;与之形成反差的，是现在正在做的事，回报周期那么长、有多少又不确定，还要不要继续做呢？本来就没多少时间了，还要在目前的事情上继续投入吗？时
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0326 - 苹果的「圈留割」</title>
    <link href="https://atjason.com/daily/2019-03-26.html"/>
    <id>https://atjason.com/daily/2019-03-26.html</id>
    <published>2019-03-26T14:00:00.000Z</published>
    <updated>2019-03-26T01:33:10.399Z</updated>
    
    <content type="html"><![CDATA[<p><strong>圈留割：把用户圈进来，想办法把用户留住，然后从用户身上获利。</strong></p>
<p>当然，这是一套比较刻薄的说法，更多是站点商家和商业的角度来看，暂时忽略了给用户提供了更高价值的事实。比如，给用户带来了十分的好处，从中获取一分的利润。这样的利润，再多也不过分。</p>
<p>好了，我们试着把这个逻辑套在苹果身上。没错，就是那个散发光辉的苹果。</p>
<p><strong>先说硬件</strong>。苹果应该是硬件起家、即使现在也是硬件利润最大、却极力撇清给外界这个印象。为什么？因为硬件设计制造周期长、风险大、增长有明显的天花板。硬件增加收入也就两种方式：<strong>提价和销量</strong>。提价就不说了，最近苹果被迫降价销售，说明此路不通。销量方面，总不能人手一部吧？好，就算今年人手一部，明年呢？卖给外星人？单纯的硬件，无法撑起苹果股份不断上涨的期望。</p>
<p><strong>再说 iOS 及 App 生态</strong>。很多人想换 Android 手机却没换，很大的原因就是对 iOS App 的依赖；这是我感觉苹果最有价值的部分。可，这部分也有问题。比如，大家安装新 App 的次数越来越少了，Top 1000 甚至 Top 100 的 App，占据了绝大多数用户的绝大多数时间。还有个问题，就是微信小程序为代表的各种轻应用，事实上扼杀了很多长尾 App，给 App 生态带来直接的威胁。不爽的是，App 带来的收入，开发者竟然拿走大部分、自己只能得到 30%；更可恶的是，微信小程序竟然想绕过自己搞支付，直接攫取这可能的 30% 收入。是可忍，股价不能忍。</p>
<p><strong>再说怎么割</strong>，也就是增加收入。前面说了，硬件是主要的收入来源，却有明显的问题。那怎么办呢？苹果的选择明显是服务。服务主要是指订阅，比如 iCloud、Apple Music、Apple TV 等。既不用给别人分成 30%，又是持续、稳定、可增长的，还能给用户带来价值，怎能不诱人？比如今天的苹果发布会，有媒体标题为：<strong>苹果发布会一款硬件没发：All in服务摆脱「硬件依赖」</strong></p>
<p>最后，看下 <a href="https://www.apple.com/cn/newsroom/2019/01/apple-reports-first-quarter-results/" target="_blank" rel="external">Apple 第一季度业绩</a></p>
<blockquote>
<p>iPhone® 的收入相比去年下降 15%，而其他所有产品和服务的收入则增长了 19%。服务收入…达创纪录的 109 亿美元。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;圈留割：把用户圈进来，想办法把用户留住，然后从用户身上获利。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然，这是一套比较刻薄的说法，更多是站点商家和商业的角度来看，暂时忽略了给用户提供了更高价值的事实。比如，给用户带来了十分的好处，从中获取一分的利润。这样的利润，再
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0325 - 收敛与简化</title>
    <link href="https://atjason.com/daily/2019-03-25.html"/>
    <id>https://atjason.com/daily/2019-03-25.html</id>
    <published>2019-03-25T14:00:00.000Z</published>
    <updated>2019-03-25T15:45:21.362Z</updated>
    
    <content type="html"><![CDATA[<p>今天花了点时间研究下 Google 关键词排名监控的产品，感觉有好多。如果把他们的功能点取并集，感觉有好多。</p>
<p>而事实上，用户肯定不需要所有功能，我也没时间做那么多。这就需要取舍、简化，只做最必要的功能、用最简洁的形式。开放容易收敛难，这是产品初期不确定性最大、最烧脑的阶段。</p>
<p>而这个问题如果不想清楚，就直接上代码、边实现边改，就会出现做百度时的问题：因为对需求的理解有变动，数据结构和接口变动，这些变动湮没了很多时间。</p>
<p>明天再深度体验几款产品，找出最小功能集（没办法，我不是这个产品的直接用户，只能这样找灵感了…）。同时，初期的数据结构，尽量做的能支撑大部分功能，保留扩展性。争取明晚能正式开始代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天花了点时间研究下 Google 关键词排名监控的产品，感觉有好多。如果把他们的功能点取并集，感觉有好多。&lt;/p&gt;
&lt;p&gt;而事实上，用户肯定不需要所有功能，我也没时间做那么多。这就需要取舍、简化，只做最必要的功能、用最简洁的形式。开放容易收敛难，这是产品初期不确定性最大、
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0324 - 「我竟然忘了这件事」</title>
    <link href="https://atjason.com/daily/2019-03-24.html"/>
    <id>https://atjason.com/daily/2019-03-24.html</id>
    <published>2019-03-24T14:00:00.000Z</published>
    <updated>2019-03-24T14:41:04.955Z</updated>
    
    <content type="html"><![CDATA[<p>是不是时不时就会有这样的情况：一拍大腿，我竟然忘了这件事；要是当初做了某事就好了，现在弥补成本太高了；等等。</p>
<p>我并不是想说用待办事项软件记录下来，也不是想说注意重要而不紧急的事，而是想说，<strong>别让自己 100% 被具体的事务缠住了，至少要让 20% 的自己跳出来，站在更高的角度去审视自己、审视身边人、审视生活</strong>。可以是天马行空，可以是无厘头。即便从效用的角度，如果这时候在某个关键节点投入一点点精力，也好过将来用极大的成本来弥补或补齐。</p>
<p>给生活多一些照顾，生活少给你一些意外。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是不是时不时就会有这样的情况：一拍大腿，我竟然忘了这件事；要是当初做了某事就好了，现在弥补成本太高了；等等。&lt;/p&gt;
&lt;p&gt;我并不是想说用待办事项软件记录下来，也不是想说注意重要而不紧急的事，而是想说，&lt;strong&gt;别让自己 100% 被具体的事务缠住了，至少要让 20%
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0323 - 多做业务，少造轮子</title>
    <link href="https://atjason.com/daily/2019-03-23.html"/>
    <id>https://atjason.com/daily/2019-03-23.html</id>
    <published>2019-03-23T14:00:00.000Z</published>
    <updated>2019-03-24T00:41:13.706Z</updated>
    
    <content type="html"><![CDATA[<p>昨天折腾了下提交代码后的自动部署，将代码开源到 GitHub 上，也在 V2EX 等渠道介绍。在一些网友评论和我自己思考后，感觉这个事情不太妥：造轮子的味道太重。</p>
<p><strong>决定产品核心竞争力和赢利能力的，在于对业务的把握和实现。</strong>除此之外，其他的都是末端。尤其，在时间精力有限的前提下，<strong>应尽可能把时间精力投入到核心业务上</strong>。任何其他的东西，应尽可能「外包」给成熟的第三方服务。如果投入太多精力去重复造轮子，这就是本末倒置。</p>
<p>PS：<strong>多暴露自己，多和别人交流，是件非常好的事</strong>。别人不经意间的一句话，可能就会为自己提供全新的视角，揭示被自己习惯或忽视的东西。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天折腾了下提交代码后的自动部署，将代码开源到 GitHub 上，也在 V2EX 等渠道介绍。在一些网友评论和我自己思考后，感觉这个事情不太妥：造轮子的味道太重。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;决定产品核心竞争力和赢利能力的，在于对业务的把握和实现。&lt;/strong&gt;除此之
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0322 - 响应 GitHub Webhooks 实现自动部署的 Web 服务</title>
    <link href="https://atjason.com/daily/2019-03-22.html"/>
    <id>https://atjason.com/daily/2019-03-22.html</id>
    <published>2019-03-22T14:00:00.000Z</published>
    <updated>2019-03-22T11:59:18.915Z</updated>
    
    <content type="html"><![CDATA[<p>今天研究并实现一个响应 GitHub Webhooks 实现自动部署的 Web 服务。简单收拾了下代码和文档，<a href="https://github.com/atjason/deploy" target="_blank" rel="external">开源至此</a></p>
<h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>这并不是一个 Hello Word 教学示例，而是我自己在用的实际项目。假设你已经知道下列技术或满足其条件：</p>
<ul>
<li>有一台自己的服务器</li>
<li>会配置域名</li>
<li>会配置 nginx 或者其他 Web 服务器，实现 Web 服务至 node 服务的转发</li>
<li>了解 node、koa</li>
<li>了解 Webhooks</li>
<li>了解 SMTP</li>
<li>会编辑 shell 脚本</li>
</ul>
<h2 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h2><ul>
<li><code>node lib/index.js</code> 运行后，在 <code>3030</code> 端口提供可响应 GitHub Webhook 的服务</li>
<li>内部通过 <code>exec</code> 来调用实际工作的 shell 脚本（需要自己编写）</li>
<li>发邮件告知运行结果</li>
</ul>
<h2 id="主要配置"><a href="#主要配置" class="headerlink" title="主要配置"></a>主要配置</h2><p>均位于 <code>config</code> 目录，参照 <code>*_demo.json</code>，添加没有 <code>_demo</code> 的版本</p>
<h3 id="config-json"><a href="#config-json" class="headerlink" title="config.json"></a>config.json</h3><p>可为每个仓库、分支创建对应的配置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"webhook-test_master"</span>: &#123; <span class="comment">// RepositoryName_BranchName</span></div><div class="line">    <span class="string">"secret"</span>: <span class="string">"GitHub_Webhook_secret"</span>,</div><div class="line">    <span class="string">"cwd"</span>: <span class="string">"/home/jason/testapi/"</span>, <span class="comment">// 脚本执行目录</span></div><div class="line">    <span class="string">"command"</span>: <span class="string">"/bin/bash ./deploy.sh"</span>, <span class="comment">// 真正工作的 shell 脚本</span></div><div class="line">    <span class="string">"env"</span>: &#123; <span class="comment">// 一些环境变量</span></div><div class="line">      <span class="string">"DEBUG"</span>: <span class="string">"s:*"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="security-json"><a href="#security-json" class="headerlink" title="security.json"></a>security.json</h3><p>目前主要存储了 SMTP 配置信息，用于发告知邮件：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"mailConfig"</span>: &#123;</div><div class="line">    <span class="string">"host"</span>: <span class="string">"email-smtp.us-west-2.amazonaws.com"</span>,</div><div class="line">    <span class="string">"port"</span>: <span class="string">"465"</span>,</div><div class="line">    <span class="string">"user"</span>: <span class="string">"user123"</span>,</div><div class="line">    <span class="string">"password"</span>: <span class="string">"password123"</span>,</div><div class="line">    <span class="string">"from"</span>: <span class="string">"from@gmail.com"</span>,</div><div class="line">    <span class="string">"to"</span>: <span class="string">"to@gmail.com"</span></div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="琐碎的"><a href="#琐碎的" class="headerlink" title="琐碎的"></a>琐碎的</h2><p>关于 GitHub Webhook，记得生成密码、选择 <code>json</code> 格式。</p>
<p>关于 shell 脚本，可以通过 <code>2&gt;&amp;1</code> 将其中不重要的 warn/error，从 stderr 转到 stdout 中。</p>
<p>关于邮件服务，我开始时用的是阿里云，但出现了提示发送成功、但实际不破功的情况，垃圾箱也没有。后来试了 Amazon SES，目前一切顺利；每天 200 封免费邮件额度。</p>
<p>使用 VSCode 编写调试，<code>.vscode</code> 配置本身也包含在项目中了。</p>
<p>如果你遇到了问题，多问问 Google 和自己；我这边是顺畅运行的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天研究并实现一个响应 GitHub Webhooks 实现自动部署的 Web 服务。简单收拾了下代码和文档，&lt;a href=&quot;https://github.com/atjason/deploy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源至此&lt;/a
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0321 - 简单折腾了 Docker</title>
    <link href="https://atjason.com/daily/2019-03-21.html"/>
    <id>https://atjason.com/daily/2019-03-21.html</id>
    <published>2019-03-21T14:00:00.000Z</published>
    <updated>2019-03-21T14:55:48.549Z</updated>
    
    <content type="html"><![CDATA[<p>本来要做微信登录，一直被微信审核给卡着，烦；就折腾了 Docker.</p>
<p>目前来看，我对 Docker 的使用还在 Container 级别。比如，需要使用 mongodb；本来是全局安装，测试和生产环境使用相同的 mongo、不同的 db. 有了 Docker 之后，可以运行不同的 mongodb Container，分隔的更彻底些，理论上扩展性也更好些。再加上结果 Docker Volume，可以更好地备份恢复数据。</p>
<p>顺带着还有个好处：临时学习某技术时，不用全局安装其运行环境，而是安装一个 Docker 镜像，在这个沙盒里随意折腾，而不用担心污染电脑主环境。试用后发现不需要，直接删除 images 即可；需要时，才考虑在电脑主环境安装。</p>
<p>进阶的，还没有用于 Images/Stack/Swarm 级别；不过还是跟着官方介绍跑了一遍，大致知道是怎么回事。等将来用的时候，再细细口味。</p>
<p>比如，明天准备搭个 webhook 的响应服务，就可以用上 Docker 来开发和部署。虽然我还是觉得有点不适应，平白多了一些步骤，不过还是硬着头皮上吧，逼自己适应 Docker 的套路。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本来要做微信登录，一直被微信审核给卡着，烦；就折腾了 Docker.&lt;/p&gt;
&lt;p&gt;目前来看，我对 Docker 的使用还在 Container 级别。比如，需要使用 mongodb；本来是全局安装，测试和生产环境使用相同的 mongo、不同的 db. 有了 Docker 
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0320 - 学习的两个阶段</title>
    <link href="https://atjason.com/daily/2019-03-20.html"/>
    <id>https://atjason.com/daily/2019-03-20.html</id>
    <published>2019-03-20T14:00:00.000Z</published>
    <updated>2019-03-20T02:29:06.176Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、野蛮学习阶段"><a href="#一、野蛮学习阶段" class="headerlink" title="一、野蛮学习阶段"></a>一、野蛮学习阶段</h2><p>学新东西时，先不要太过在意能否应用到生产中、怎么用。<strong>先把自己完全沉浸到新东西中，用新东西的视角和思维模式来理解一切。</strong><br>打个比方，自己之前擅长用螺丝刀解决一切问题。现在开始学锤子，先不着急和螺丝刀比较，而是认真学习锤子的使用方式，把全世界看成钉子。</p>
<h2 id="二、为我所用阶段"><a href="#二、为我所用阶段" class="headerlink" title="二、为我所用阶段"></a>二、为我所用阶段</h2><p>等到了一定程度，再跳出来，和已有的东西交融。</p>
<p>比如，和螺丝刀相比，锤子在哪些方面更好使；又有哪些局限，还是有螺丝刀更顺手；<br>比如，我目前正在使用的技术和方式，有哪些不足；和新东西相比，互相有哪些优缺点。</p>
<p>既不盲目崇拜新东西、把已有的拍死，也不要过早因为新东西的局限而下结论。</p>
<p><strong>更关键的</strong>，是已经会的、和新学的东西之间，如何交融，如何发挥双方的特长，<strong>如何更新自己的技术树</strong>。该用锤子用锤子，该用螺丝刀则继续使用螺丝刀。</p>
<p><strong>吸星大法</strong>，你怕不怕？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、野蛮学习阶段&quot;&gt;&lt;a href=&quot;#一、野蛮学习阶段&quot; class=&quot;headerlink&quot; title=&quot;一、野蛮学习阶段&quot;&gt;&lt;/a&gt;一、野蛮学习阶段&lt;/h2&gt;&lt;p&gt;学新东西时，先不要太过在意能否应用到生产中、怎么用。&lt;strong&gt;先把自己完全沉浸到新东西
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0319 - 被微信审核搞得有点烦</title>
    <link href="https://atjason.com/daily/2019-03-19.html"/>
    <id>https://atjason.com/daily/2019-03-19.html</id>
    <published>2019-03-19T14:00:00.000Z</published>
    <updated>2019-03-19T15:22:58.455Z</updated>
    
    <content type="html"><![CDATA[<p>这周本来有几项关键词改进的功能，这些功能都或多或少依赖微信登录。可，在微信开放平台创建应用需要审核。审核也就罢了，等了 2 天，竟然审核没通过，说是提供的材料缺少盖章。</p>
<p>哎，能不能专业点，我用的是个体户资质，本来就没公章，去淘宝买个萝卜章给你盖上啊？被拒后，连个申诉的入口都没有，发邮件也没任何反应，真是相当糟糕的体验。</p>
<p>既影响进度、又影响心情，干脆不搞了，去学 Docker，换个心情。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周本来有几项关键词改进的功能，这些功能都或多或少依赖微信登录。可，在微信开放平台创建应用需要审核。审核也就罢了，等了 2 天，竟然审核没通过，说是提供的材料缺少盖章。&lt;/p&gt;
&lt;p&gt;哎，能不能专业点，我用的是个体户资质，本来就没公章，去淘宝买个萝卜章给你盖上啊？被拒后，连
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0318 - 做朋友的需求</title>
    <link href="https://atjason.com/daily/2019-03-18.html"/>
    <id>https://atjason.com/daily/2019-03-18.html</id>
    <published>2019-03-18T14:00:00.000Z</published>
    <updated>2019-03-24T15:19:09.378Z</updated>
    
    <content type="html"><![CDATA[<p>最好的，是做自己的需求，可以 100% 知道要做什么、做成什么样子。</p>
<p>其次，是做朋友的需求，可以随时拉过来问，要做什么、做成什么样子。注意，即使如此，也要保持主动性、有自己的理解判断，不能被带着走。终究，还是要当成自己的需求去做。</p>
<p>关键词排名监控，便是后者。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最好的，是做自己的需求，可以 100% 知道要做什么、做成什么样子。&lt;/p&gt;
&lt;p&gt;其次，是做朋友的需求，可以随时拉过来问，要做什么、做成什么样子。注意，即使如此，也要保持主动性、有自己的理解判断，不能被带着走。终究，还是要当成自己的需求去做。&lt;/p&gt;
&lt;p&gt;关键词排名监控
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0317 - 与头部合作</title>
    <link href="https://atjason.com/daily/2019-03-17.html"/>
    <id>https://atjason.com/daily/2019-03-17.html</id>
    <published>2019-03-17T14:00:00.000Z</published>
    <updated>2019-03-17T14:06:55.108Z</updated>
    
    <content type="html"><![CDATA[<p>「<strong>关键词排名监控</strong>」这个项目，需要引入 <strong>账户系统</strong>，用于在不同设备间同步数据，以及将来可能的付费账户体系。</p>
<p>首先，<strong>放弃使用邮箱、手机号等方式自建账户体系</strong>。因为坑太多、成本太高。比如什么被批量注册、修改密码、复杂的找回密码机制、甚至是貌似简单的登出机制、发短信要钱、等等，都是额外的工作量和成本。</p>
<p><strong>对于小项目，还是使用微信、QQ、微博等平台开放的账户体系比较快捷</strong>，省去上面说的诸多麻烦。<strong>对用户也方便</strong>，不用再记一个密码。但有一点一定要注意：<strong>更改账户麻烦</strong>。比如是给公司用的账户，如果用的是员工个人的微信，那员工离职时账户的交接，就是比较麻烦的事。</p>
<p>说个插曲，<strong>如果你业务比较大，大到威胁到这个平台本身的利益，那就一定要自建账户体系了</strong>；比如刚刚发生不久的微信停止支持登录抖音。<strong>一旦涉及到商业利益，什么开放、合作、诚信、包容，统统扯淡</strong>。</p>
<p>绕了一圈，说回标题（不是标题党）；在这些平台提供的账户体系中，<strong>最好是使用微信</strong>，因为用户使用方便，比如在微信中几乎可以无缝登录。<strong>但</strong>，这有个很麻烦的前提：<strong>需要认证微信开放平台</strong>。而这个「开放」平台，<strong>并不对个人开放</strong>，需要用到企业资质，同时网站也必须备案。我觉得麻烦，但想退而求其次，使用 QQ 登录，结果发现也是个坑。</p>
<p>「QQ 登录」，只是我们的说法，真实的情况是，分了「腾讯开放平台」和「QQ 互联」2 个东西。以我目前的理解，其内部账户又是半互通。这也就算了，关键官网各种低级问题，开发者资料根本无法提交，更别说审核通过了；其文档也极其陈旧，官方的 js sdk 「最新版」是 2012 年的，可谓史前级了。客服入口很隐蔽，找到了也根本联系不上。</p>
<p>总之，各种难受之后，本着珍惜生命的原则，我还是 <strong>弃坑 QQ 登录了</strong>。目光重新移回微信登录，意外发现，<strong>个体户也可以认证微信开放平台</strong>。于是屁颠屁颠地填表、签字并上传、交 300 元认证费用。第三方认证倒是很快，10 分钟就打电话，几小时便认证成功了。</p>
<p>当然，后续还是有坑的，比如创建应用又要审核…（微信应该是是靠审核发家致富的无疑…）Anyway，和 QQ 登录相比，也是云泥有别了。至少，遇到问题相信找官方支持，也更容易些。</p>
<p>经过这次，我更加感觉，<strong>在选择合作伙伴时，一定要选好的、最好是最好的</strong>。表面上前期成本会高些，但长期看，绝对能值回票价。不要在这点上将就，切记。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「&lt;strong&gt;关键词排名监控&lt;/strong&gt;」这个项目，需要引入 &lt;strong&gt;账户系统&lt;/strong&gt;，用于在不同设备间同步数据，以及将来可能的付费账户体系。&lt;/p&gt;
&lt;p&gt;首先，&lt;strong&gt;放弃使用邮箱、手机号等方式自建账户体系&lt;/strong&gt;。因为坑太
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0316 - 不负春光</title>
    <link href="https://atjason.com/daily/2019-03-16.html"/>
    <id>https://atjason.com/daily/2019-03-16.html</id>
    <published>2019-03-16T14:00:00.000Z</published>
    <updated>2019-03-16T15:47:17.213Z</updated>
    
    <content type="html"><![CDATA[<p>最近这天气真是舒服啊，暖阳轻风，不冷不热，惬意~</p>
<p>这两天又看到一些优秀还比自己年轻的经历，各种角度受打击。通常，这种时候我都会想，如果当初我怎样怎样，结果肯定要比现在好很多。</p>
<p>努力，最好的时间是昨天，其次是现在；不负春光。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这天气真是舒服啊，暖阳轻风，不冷不热，惬意~&lt;/p&gt;
&lt;p&gt;这两天又看到一些优秀还比自己年轻的经历，各种角度受打击。通常，这种时候我都会想，如果当初我怎样怎样，结果肯定要比现在好很多。&lt;/p&gt;
&lt;p&gt;努力，最好的时间是昨天，其次是现在；不负春光。&lt;/p&gt;

    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0315 - 每天预留自由时间</title>
    <link href="https://atjason.com/daily/2019-03-15.html"/>
    <id>https://atjason.com/daily/2019-03-15.html</id>
    <published>2019-03-15T14:00:00.000Z</published>
    <updated>2019-03-15T16:01:57.385Z</updated>
    
    <content type="html"><![CDATA[<p>结论：每天晚上 11 点之后，不再做业务相关的事情，只用来思考、学习、或发呆。</p>
<p>忙了一天，需要一个调整切换的时期：</p>
<ul>
<li>比如，在赶业务时暂时搁置的不熟悉的部分，学习之；</li>
<li>比如，思考今天的技术方案，有没有更好的实现方式；</li>
<li>比如，跳出具体的事情，从更多的角度审视项目所处的状态，确定明天最应该做什么；</li>
<li>比如，就是休息一下，放空大脑；</li>
</ul>
<p>做完这一切，正好是新的一天的形女以；从睡觉回血开始，开启美妙的一天。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;结论：每天晚上 11 点之后，不再做业务相关的事情，只用来思考、学习、或发呆。&lt;/p&gt;
&lt;p&gt;忙了一天，需要一个调整切换的时期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如，在赶业务时暂时搁置的不熟悉的部分，学习之；&lt;/li&gt;
&lt;li&gt;比如，思考今天的技术方案，有没有更好的实现方式；&lt;
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0314 - 所有好的，都值得大力称赞</title>
    <link href="https://atjason.com/daily/2019-03-14.html"/>
    <id>https://atjason.com/daily/2019-03-14.html</id>
    <published>2019-03-14T14:00:00.000Z</published>
    <updated>2019-03-14T16:15:05.146Z</updated>
    
    <content type="html"><![CDATA[<p>比如机动车在斑马线上让行人。我们先不考虑效率等因素，先假定这是好的行为。那么，不论让行人的动机，是司机主动礼让，还是不想被拍照扣分，都应该大力称赞这种行为。</p>
<p>核心的一点是，不能因为动机是怕被拍照扣分，就认为这么行为不值得表扬，更不能觉得「本该如此」人们本该善良、本该助人这样的人设，并不出现在现实中，可能童话或动画片里会有。</p>
<p>如果愿意用一分来唾弃不好的，就要用十分来称赞好的；别因动机而吝啬你的表扬。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比如机动车在斑马线上让行人。我们先不考虑效率等因素，先假定这是好的行为。那么，不论让行人的动机，是司机主动礼让，还是不想被拍照扣分，都应该大力称赞这种行为。&lt;/p&gt;
&lt;p&gt;核心的一点是，不能因为动机是怕被拍照扣分，就认为这么行为不值得表扬，更不能觉得「本该如此」人们本该善良
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0313 - 不能复制时间的事，少做</title>
    <link href="https://atjason.com/daily/2019-03-13.html"/>
    <id>https://atjason.com/daily/2019-03-13.html</id>
    <published>2019-03-13T14:00:00.000Z</published>
    <updated>2019-03-13T15:19:14.742Z</updated>
    
    <content type="html"><![CDATA[<p>比如，开发自己的产品，可以给无数人用，相当于把自己的时间复制了无数份。</p>
<p>比如，做外包开发给别人开发产品，只能取得一次性的报酬；自己的时间并不能复制，只是简单的出卖。</p>
<p><strong>不能复制时间的事，少做，这不利于自己价值的最大化。</strong></p>
<p>不过，凡事无绝对。比如外包，如果钱实在多的诱人，或者正好自己感兴趣，或者可以锻炼自己正在学的技术，等等；对于这些情况，自然是可以做的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比如，开发自己的产品，可以给无数人用，相当于把自己的时间复制了无数份。&lt;/p&gt;
&lt;p&gt;比如，做外包开发给别人开发产品，只能取得一次性的报酬；自己的时间并不能复制，只是简单的出卖。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不能复制时间的事，少做，这不利于自己价值的最大化。&lt;/stron
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0312 - 选择多：甜蜜的烦恼</title>
    <link href="https://atjason.com/daily/2019-03-12.html"/>
    <id>https://atjason.com/daily/2019-03-12.html</id>
    <published>2019-03-12T14:00:00.000Z</published>
    <updated>2019-03-12T16:05:34.039Z</updated>
    
    <content type="html"><![CDATA[<p>关键词项目前端的功能差不多了，今天挑前端框架优化之，真的挑花眼了…</p>
<p>前后了解了 Bootstrap、Bulma、Ant Design、Element、iView 等，最后选择了 <strong>Element</strong>；其中，一个重要的原因是，鉴于我的 Vue 基础还不牢，而 Element 文档里包含了大量 Vue 实例代码，简直可以拿来就用，抵挡不了诱惑。</p>
<p>另外，对 Ant Design 也挺有好感的。一方面它的「面向中后端」的定位，其实挺符合我的需求；另一方面，它的生态相对更丰富，比如对设计原则的介绍、设计资源、文档等等。不过，未选择它的原因是，Ant Design 是 React 基因，Vue 版本貌似去年下半年才推出来，且未应用到 Ant Design Pro 中，是明显的二等公民。且文档中没有 Vue 示例源码 😂</p>
<p>挑完后，看了一遍 Element 官方文档，大概了解了它怎么用、包含哪些组件，也写了测试代码进行可行性研究，基本心里有数。原本计划 3 天的后端 UI 改进，看来可以加快到 2 天了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关键词项目前端的功能差不多了，今天挑前端框架优化之，真的挑花眼了…&lt;/p&gt;
&lt;p&gt;前后了解了 Bootstrap、Bulma、Ant Design、Element、iView 等，最后选择了 &lt;strong&gt;Element&lt;/strong&gt;；其中，一个重要的原因是，鉴于我的
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0311 - 上了并发系统</title>
    <link href="https://atjason.com/daily/2019-03-11.html"/>
    <id>https://atjason.com/daily/2019-03-11.html</id>
    <published>2019-03-11T14:00:00.000Z</published>
    <updated>2019-03-11T16:51:00.483Z</updated>
    
    <content type="html"><![CDATA[<p>今天给关键词项目上了并发系统。</p>
<p>先是用测试项目，实现了代理池自动更新；然后将其应用到爬虫系统中。由于要支持并发，代码系统变得复杂很多，且增加了一些冗余逻辑来保证一致性和可靠性。比较不爽的是，由于代理池性能的问题，10 倍速并发并不能带来 10 倍的提速，有点得不偿失的感觉。</p>
<p><strong>实际项目中，架构及实现的可靠性，甚至比较性能更重要</strong>。性能问题，可以简单粗暴地加强硬件解决。但可靠性问题就比较麻烦；尤其是项目进行维护期，自己对代码越来越不熟悉，一旦出基础的问题，修复的成本就很高了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天给关键词项目上了并发系统。&lt;/p&gt;
&lt;p&gt;先是用测试项目，实现了代理池自动更新；然后将其应用到爬虫系统中。由于要支持并发，代码系统变得复杂很多，且增加了一些冗余逻辑来保证一致性和可靠性。比较不爽的是，由于代理池性能的问题，10 倍速并发并不能带来 10 倍的提速，有点得
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>0310 - 这周有点太忙了</title>
    <link href="https://atjason.com/daily/2019-03-10.html"/>
    <id>https://atjason.com/daily/2019-03-10.html</id>
    <published>2019-03-10T14:00:00.000Z</published>
    <updated>2019-03-10T16:14:23.599Z</updated>
    
    <content type="html"><![CDATA[<p>这周一直在写代码，在开发关键词排名监控的业务，每天都干到很晚，确实很忙。</p>
<p>注意：<strong>说太忙，这话并不是褒义，而是预示着有很大的问题。</strong></p>
<p>如果忙到没有足够的时间思考，没有在业务之外的范畴中有学习和进步，那么 <strong>这种忙，是螺丝钉级别的，是值得羞耻的。</strong></p>
<p><strong>换个角度，之所以忙，很大原因还是能力不足</strong>，导致开发过程有各种问题，比如接口的反复修改而浪费了不少时间，比如一些基础的问题还得去 Google，等等。<strong>而这些导致忙的问题，恰恰不是忙能解决的</strong>。必须在不忙的情况下，潜心地学习进步，才能在之后的工作中提高效率，变得不忙。</p>
<p>下周一定调整这个问题，切记。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这周一直在写代码，在开发关键词排名监控的业务，每天都干到很晚，确实很忙。&lt;/p&gt;
&lt;p&gt;注意：&lt;strong&gt;说太忙，这话并不是褒义，而是预示着有很大的问题。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果忙到没有足够的时间思考，没有在业务之外的范畴中有学习和进步，那么 &lt;stron
    
    </summary>
    
      <category term="每天写一点" scheme="https://atjason.com/categories/%E6%AF%8F%E5%A4%A9%E5%86%99%E4%B8%80%E7%82%B9/"/>
    
    
  </entry>
  
</feed>
